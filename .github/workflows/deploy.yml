name: Build, Test & Deploy React Frontend

on:
  pull_request:
    branches: [ main, staging ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME_WEB: ghcr.io/minhtrantuan3112/photonpiano-webapp
  NODE_VERSION: '20.x'
  VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
  VITE_COOKIE_SECRET: ${{ secrets.VITE_COOKIE_SECRET }}
  VITE_IS_DEVELOPMENT: ${{ secrets.VITE_IS_DEVELOPMENT }}
  VITE_PINATA_API_KEY: ${{ secrets.VITE_PINATA_API_KEY }}
  VITE_PINATA_API_SECRET: ${{ secrets.VITE_PINATA_API_SECRET }}
  VITE_PINATA_GATEWAY_KEY: ${{ secrets.VITE_PINATA_GATEWAY_KEY }}
  VITE_PINATA_GATEWAY_BASE_URL: ${{ secrets.VITE_PINATA_GATEWAY_BASE_URL }}
  VITE_API_PUB_SUB_URL: ${{ secrets.VITE_API_PUB_SUB_URL }}
  VITE_API_NOTIFICATION_URL: ${{ secrets.VITE_API_NOTIFICATION_URL }}
  VITE_API_PROGRESS_URL: ${{ secrets.VITE_API_PROGRESS_URL }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🔍 Inspect Build Output
        run: ls -la build build/server || echo "Server directory not found"

  docker-build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME_WEB }}:latest
            ${{ env.IMAGE_NAME_WEB }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          build-args: |
            VITE_API_BASE_URL=${{ env.VITE_API_BASE_URL }}
            VITE_COOKIE_SECRET=${{ env.VITE_COOKIE_SECRET }}
            VITE_IS_DEVELOPMENT=${{ env.VITE_IS_DEVELOPMENT }}
            VITE_PINATA_API_KEY=${{ env.VITE_PINATA_API_KEY }}
            VITE_PINATA_API_SECRET=${{ env.VITE_PINATA_API_SECRET }}
            VITE_PINATA_GATEWAY_KEY=${{ env.VITE_PINATA_GATEWAY_KEY }}
            VITE_PINATA_GATEWAY_BASE_URL=${{ env.VITE_PINATA_GATEWAY_BASE_URL }}
            VITE_API_PUB_SUB_URL=${{ env.VITE_API_PUB_SUB_URL }}
            VITE_API_NOTIFICATION_URL=${{ env.VITE_API_NOTIFICATION_URL }}
            VITE_API_PROGRESS_URL=${{ env.VITE_API_PROGRESS_URL }}

  deploy-to-server:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo -e "Host *\n  StrictHostKeyChecking no\n" > ~/.ssh/config

      - name: 🚀 Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e # Stop script if there's an error
            
            # Ensure directory structure exists
            mkdir -p ~/photonpiano/frontend
            
            # Create .env file for frontend
            cat > ~/photonpiano/frontend/.env <<EOF
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_COOKIE_SECRET=${{ secrets.VITE_COOKIE_SECRET }}
            VITE_IS_DEVELOPMENT=${{ secrets.VITE_IS_DEVELOPMENT }}
            VITE_PINATA_API_KEY=${{ secrets.VITE_PINATA_API_KEY }}
            VITE_PINATA_API_SECRET=${{ secrets.VITE_PINATA_API_SECRET }}
            VITE_PINATA_GATEWAY_KEY=${{ secrets.VITE_PINATA_GATEWAY_KEY }}
            VITE_PINATA_GATEWAY_BASE_URL=${{ secrets.VITE_PINATA_GATEWAY_BASE_URL }}
            VITE_API_PUB_SUB_URL=${{ secrets.VITE_API_PUB_SUB_URL }}
            VITE_API_NOTIFICATION_URL=${{ secrets.VITE_API_NOTIFICATION_URL }}
            VITE_API_PROGRESS_URL=${{ secrets.VITE_API_PROGRESS_URL }}
            EOF
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GH_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Backup current image
            CURRENT_IMAGE=$(docker inspect --format='{{.Config.Image}}' photonpiano-web 2>/dev/null || echo "")
            if [ ! -z "$CURRENT_IMAGE" ]; then
              docker tag $CURRENT_IMAGE ${{ env.IMAGE_NAME_WEB }}:backup
              echo "Backed up current image as ${{ env.IMAGE_NAME_WEB }}:backup"
            else
              echo "No running container found, no backup created"
            fi

            # Pull the latest frontend image
            docker pull ${{ env.IMAGE_NAME_WEB }}:latest

            # Go to main directory and deploy new image
            cd ~/photonpiano
            docker compose -p photonpiano up -d --force-recreate

            # Health check (wait up to 30 seconds for container to be healthy)
            echo "Checking container health..."
            for i in {1..6}; do
              if docker inspect photonpiano-web --format='{{.State.Health.Status}}' 2>/dev/null | grep -q "healthy"; then
                echo "Container is healthy"
                # Clean up old images (optional)
                docker image prune -f
                exit 0
              elif docker inspect photonpiano-web --format='{{.State.Status}}' 2>/dev/null | grep -q "running"; then
                echo "Container is running, waiting for health check..."
                sleep 5
              else
                echo "Container is not running, initiating rollback..."
                break
              fi
            done

            # Rollback if health check fails
            echo "Health check failed, rolling back to backup image..."
            if [ -n "$(docker images -q ${{ env.IMAGE_NAME_WEB }}:backup)" ]; then
              # Update docker-compose.yml to use backup image
              sed -i "s|image: ${{ env.IMAGE_NAME_WEB }}:latest|image: ${{ env.IMAGE_NAME_WEB }}:backup|g" ~/photonpiano/docker-compose.yml
              docker compose -p photonpiano up -d --force-recreate
              echo "Rolled back to ${{ env.IMAGE_NAME_WEB }}:backup"
              exit 1
            else
              echo "No backup image available, cannot rollback"
              exit 1
            fi